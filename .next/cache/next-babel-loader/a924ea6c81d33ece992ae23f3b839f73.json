{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ToastContainer, toast } from 'react-toastify';\nimport SingleProduct from '../Common/SingleProduct';\nimport { addToCart } from '../../store/actions/cartActions';\nimport QuickViewModal from '../Modals/QuickViewModal';\nimport ShopSidebar from './ShopSidebar';\nimport Pagination from '../Common/Pagination';\n\nclass ProductsFullWidth extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      QuickViewModal: false,\n      modalProduct: {},\n      products: [],\n      pageOfItems: [],\n      currentPage: 0,\n      pageSize: 0\n    });\n\n    _defineProperty(this, \"onChangePage\", (pageOfItems, pager) => {\n      let {\n        currentPage,\n        pageSize\n      } = pager; // update state with new page of items\n\n      this.setState({\n        pageOfItems,\n        currentPage,\n        pageSize\n      });\n      window.scrollTo({\n        top: 0,\n        left: 100,\n        behavior: 'smooth'\n      });\n    });\n\n    _defineProperty(this, \"toggleModal\", () => {\n      this.setState({\n        QuickViewModal: !this.state.QuickViewModal\n      });\n    });\n\n    _defineProperty(this, \"handleAddToCart\", id => {\n      this.props.addToCart(id);\n      toast.success('Added to the cart', {\n        position: \"bottom-left\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true\n      });\n    });\n\n    _defineProperty(this, \"passDataToModal\", product => {\n      this.setState({\n        modalProduct: product\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.setState({\n      products: this.props.products\n    });\n  }\n\n  render() {\n    let {\n      currentPage,\n      pageSize,\n      products\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"container-fluid\"\n    }, __jsx(ToastContainer, null), __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"div\", {\n      className: \"col-lg-4 col-md-12\"\n    }, __jsx(ShopSidebar, null)), __jsx(\"div\", {\n      className: \"col-lg-8 col-md-12\"\n    }, __jsx(\"div\", {\n      className: \"products-filter-options\"\n    }, __jsx(\"div\", {\n      className: \"row align-items-center\"\n    }, __jsx(\"div\", {\n      className: \"col-lg-8 col-md-8\"\n    }, __jsx(\"p\", null, \"Showing \", currentPage == 1 ? currentPage : (currentPage - 1) * pageSize + 1, \" \\u2013 \", currentPage * pageSize)), __jsx(\"div\", {\n      className: \"col-lg-4 col-md-4\"\n    }, __jsx(\"p\", {\n      className: \"text-right\"\n    }, \"Total \", products.length, \" Products\")))), __jsx(\"div\", {\n      id: \"products-collections-filter\",\n      className: \"row\"\n    }, this.state.pageOfItems.map((product, idx) => __jsx(SingleProduct, {\n      styleCls: \"col-lg-4 col-md-6 col-sm-6 products-col-item\",\n      product: product,\n      key: idx,\n      onHandleAddToCart: this.handleAddToCart,\n      onhandleModalProduct: this.passDataToModal,\n      ontoggleModal: this.toggleModal\n    }))), __jsx(QuickViewModal, {\n      onClick: this.toggleModal,\n      active: this.state.QuickViewModal ? 'active' : '',\n      product: this.state.modalProduct\n    }), __jsx(Pagination, {\n      pageSize: 12,\n      items: this.state.products,\n      onChangePage: this.onChangePage\n    }))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addToCart: id => {\n      dispatch(addToCart(id));\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(ProductsFullWidth);","map":null,"metadata":{},"sourceType":"module"}
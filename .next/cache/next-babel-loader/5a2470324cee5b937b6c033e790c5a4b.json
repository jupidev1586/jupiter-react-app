{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport axios from \"axios\";\nimport Router from 'next/router';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { resetCart } from '../../store/actions/cartActions';\nimport { firebase } from '../../firebase';\n\nclass Payments extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onToken\", async token => {\n      const body = {\n        customerDetails: {\n          firstName: this.props.userData.firstName.value,\n          lastName: this.props.userData.lastName.value,\n          email: this.props.userData.email.value,\n          phone: this.props.userData.phone.value,\n          address: this.props.userData.address.value,\n          city: this.props.userData.city.value,\n          state: this.props.userData.state.value,\n          zip: this.props.userData.zip.value\n        },\n        items: _objectSpread({}, this.props.products),\n        amount: this.props.total,\n        status: 'pending',\n        token: token,\n        createdAt: new Date()\n      };\n      await axios.post(\"/api/checkout\", body);\n      const db = firebase.firestore();\n      const dbOrderRef = db.collection('orders');\n      dbOrderRef.add(body).then(() => {\n        this.props.resetCart();\n        toast.success('Submitted the order, we will contact you soon.', {\n          position: \"bottom-left\",\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true\n        });\n        setTimeout(() => {\n          Router.push('/');\n        }, 3000);\n      });\n    });\n  }\n\n  render() {\n    let {\n      amount\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"order-btn\"\n    }, __jsx(StripeCheckout, {\n      name: \"Jupiter\",\n      description: \"React Next eCommerce Templates\",\n      amount: amount,\n      currency: \"USD\",\n      token: this.onToken,\n      stripeKey: \"pk_test_ZaZZWZGlvdIn12yFleIqyjSI00G4e18Kf7\",\n      billingAddress: false,\n      closed: this.handleClick\n    }, __jsx(\"button\", {\n      disabled: this.props.disabled,\n      className: `default-btn`\n    }, \"Place Order\"))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    products: state.addedItems,\n    total: state.total\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    resetCart: () => {\n      dispatch(resetCart());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Payments);","map":null,"metadata":{},"sourceType":"module"}
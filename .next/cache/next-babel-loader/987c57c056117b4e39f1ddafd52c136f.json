{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Chart } from \"react-google-charts\";\n\nvar LineChart = /*#__PURE__*/function (_Component) {\n  _inherits(LineChart, _Component);\n\n  var _super = _createSuper(LineChart);\n\n  function LineChart() {\n    var _this;\n\n    _classCallCheck(this, LineChart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      data: [[\"Month\", \"Sales\", \"Income\"], [\"15-Apr-2020\", 0, 0]],\n      months: new Array(),\n      options: {\n        title: \"Sales By Date\",\n        curveType: \"function\",\n        legend: {\n          position: \"bottom\"\n        }\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(LineChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var arr = [];\n      this.props.data.map(function (a) {\n        arr.push(a);\n      });\n      arr.map(function (b, i) {\n        var t = new Date(1970, 0, 1);\n        var time = t.setSeconds(b.createdAt.seconds);\n        var ye = new Intl.DateTimeFormat('en', {\n          year: 'numeric'\n        }).format(time);\n        var mo = new Intl.DateTimeFormat('en', {\n          month: 'short'\n        }).format(time);\n        var da = new Intl.DateTimeFormat('en', {\n          day: '2-digit'\n        }).format(time);\n        var date = \"\".concat(da, \"-\").concat(mo, \"-\").concat(ye);\n\n        _this2.state.months.push(date);\n\n        var data = [_this2.state.months[i], b.amount, b.amount - b.amount / 2];\n\n        _this2.state.data.push(data);\n\n        console.log(_this2.state.months[i]);\n        console.log(i);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.state.data);\n\n      if (this.state.data) {\n        return __jsx(\"div\", {\n          className: \"chart-box\"\n        }, __jsx(Chart, {\n          chartType: \"LineChart\",\n          data: this.state.data,\n          options: this.state.options,\n          width: \"100%\",\n          height: \"500px\",\n          legendToggle: true\n        }));\n      }\n    }\n  }]);\n\n  return LineChart;\n}(Component);\n\nexport default LineChart;","map":{"version":3,"sources":["C:/Users/Gianpaolo/WEB/_ENVato REACT/themeforest-2joexD7J-livani-react-next-ecommerce-store-template/livani-react-next-ecommerce-template/livani-react/components/Admin/LineChart.js"],"names":["React","Component","Chart","LineChart","data","months","Array","options","title","curveType","legend","position","arr","props","map","a","push","b","i","t","Date","time","setSeconds","createdAt","seconds","ye","Intl","DateTimeFormat","year","format","mo","month","da","day","date","state","amount","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Chart } from \"react-google-charts\";\n\nclass LineChart extends Component {\n    state = {\n        data: [\n            [\"Month\", \"Sales\", \"Income\"],\n            [\"15-Apr-2020\", 0, 0]\n        ],\n        months: new Array(),\n        options: {\n            title: \"Sales By Date\",\n            curveType: \"function\",\n            legend: { position: \"bottom\" }\n        }\n    };\n\n    componentDidMount(){\n        let arr = [];\n        this.props.data.map(a => {\n            arr.push(a)\n        });\n        arr.map((b, i) => {\n            let t = new Date(1970, 0, 1);\n            let time = t.setSeconds(b.createdAt.seconds);\n            const ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(time);\n            const mo = new Intl.DateTimeFormat('en', { month: 'short' }).format(time);\n            const da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(time);\n            let date = `${da}-${mo}-${ye}`;\n            this.state.months.push(date);\n            let data = [this.state.months[i], b.amount, b.amount - b.amount / 2 ];\n            this.state.data.push(data);\n            console.log(this.state.months[i]);\n            console.log(i);\n        });\n    }\n\n    render(){\n        console.log(this.state.data)\n        if (this.state.data){\n            return (\n                <div className=\"chart-box\">\n                    <Chart\n                        chartType=\"LineChart\"\n                        data={this.state.data}\n                        options={this.state.options}\n                        width=\"100%\"\n                        height=\"500px\"\n                        legendToggle\n                    />\n                </div>\n            )\n        }\n    }\n}\n\nexport default LineChart;"]},"metadata":{},"sourceType":"module"}
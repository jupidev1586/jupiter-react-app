{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { toast } from 'react-toastify';\nimport { firebase } from '../../../firebase';\nimport axios from 'axios';\n\nclass AddProductModal extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      modal: false,\n      imageUrl: '',\n      imageHoverUrl: '',\n      progress: 0,\n      title: '',\n      type: 'T-Shirt',\n      description: '',\n      offer: true,\n      oldPrice: 0,\n      newPrice: 0,\n      discount: true,\n      discountOff: 0,\n      onSale: true,\n      newProduct: true,\n      previewImage: null,\n      previewImageHover: null\n    });\n\n    _defineProperty(this, \"baseState\", this.state);\n\n    _defineProperty(this, \"resetForm\", () => {\n      this.setState(this.baseState);\n    });\n\n    _defineProperty(this, \"closeModal\", () => {\n      this.props.onClick(this.state.modal);\n    });\n\n    _defineProperty(this, \"handleChange\", e => {\n      if (e.target.files[0]) {\n        let image = e.target.files[0];\n        let reader = new FileReader();\n        reader.readAsDataURL(image);\n\n        reader.onload = () => {\n          // console.log(reader.result);\n          this.setState({\n            previewImage: reader.result\n          });\n        };\n\n        this.handleUpload(image);\n      }\n    });\n\n    _defineProperty(this, \"handleUpload\", image => {\n      const data = new FormData();\n\n      if (image) {\n        data.append('productImage', image, image.name);\n        axios.post('/api/upload', data, {\n          headers: {\n            'accept': 'application/json',\n            'Accept-Language': 'en-US,en;q=0.8',\n            'Content-Type': `multipart/form-data; boundary=${data._boundary}`\n          }\n        }).then(response => {\n          if (200 === response.status) {\n            // If file size is larger than expected.\n            if (response.data.error) {\n              if ('LIMIT_FILE_SIZE' === response.data.error.code) {\n                alert('Max size: 2MB');\n              } else {\n                console.log(response.data); // If not the given file type\n\n                alert(response.data.error);\n              }\n            } else {\n              // Success\n              let fileName = response.data;\n              this.setState({\n                imageUrl: fileName.location\n              });\n              console.log('fileName', fileName.location); // alert( 'File Uploaded', '#3089cf' );\n            }\n          }\n        }).catch(error => {\n          // If another error\n          alert(error, 'red');\n        });\n      } else {\n        // if file not selected throw error\n        alert('Please upload file');\n      }\n    });\n\n    _defineProperty(this, \"handleChangeHover\", e => {\n      if (e.target.files[0]) {\n        let imageHover = e.target.files[0];\n        let reader = new FileReader();\n        reader.readAsDataURL(imageHover);\n\n        reader.onload = () => {\n          // console.log(reader.result);\n          this.setState({\n            previewImageHover: reader.result\n          });\n        };\n\n        this.handleUploadHover(imageHover);\n      }\n    });\n\n    _defineProperty(this, \"handleUploadHover\", imageHover => {\n      const data = new FormData();\n\n      if (imageHover) {\n        data.append('productImageHover', imageHover, imageHover.name);\n        axios.post('/api/upload-hover', data, {\n          headers: {\n            'accept': 'application/json',\n            'Accept-Language': 'en-US,en;q=0.8',\n            'Content-Type': `multipart/form-data; boundary=${data._boundary}`\n          }\n        }).then(response => {\n          if (200 === response.status) {\n            // If file size is larger than expected.\n            if (response.data.error) {\n              if ('LIMIT_FILE_SIZE' === response.data.error.code) {\n                alert('Max size: 2MB');\n              } else {\n                console.log(response.data); // If not the given file type\n                // alert( response.data.error, 'red' );\n              }\n            } else {\n              // Success\n              let fileName = response.data;\n              this.setState({\n                imageHoverUrl: fileName.location\n              }); // console.log( 'fileName', fileName.location );\n              // alert( 'File Uploaded', '#3089cf' );\n            }\n          }\n        }).catch(error => {\n          // If another error\n          alert(error);\n        });\n      } else {\n        // if file not selected throw error\n        alert('Please upload file');\n      }\n    });\n\n    _defineProperty(this, \"addProduct\", e => {\n      e.preventDefault(); // console.log(this.state.imageUrl)\n\n      let {\n        imageUrl,\n        imageHoverUrl,\n        title,\n        type,\n        description,\n        offer,\n        oldPrice,\n        newPrice,\n        discount,\n        discountOff,\n        onSale,\n        newProduct\n      } = this.state;\n      const product = {\n        imageUrl: imageUrl,\n        imageHoverUrl: imageHoverUrl,\n        title: title,\n        type: type,\n        description: description,\n        offer: Boolean(offer),\n        oldPrice: Number(oldPrice),\n        newPrice: Number(newPrice),\n        discount: Boolean(discount),\n        discountOff: Number(discountOff),\n        onSale: Boolean(onSale),\n        newProduct: Boolean(newProduct)\n      };\n\n      if (title != '' || imageUrl != '' || imageHoverUrl != '') {\n        const db = firebase.firestore();\n        const dbOrderRef = db.collection('products');\n        dbOrderRef.add(product).then(() => {\n          // this.props.resetCart();\n          toast.success('Product has been created successfully.', {\n            position: \"bottom-left\",\n            autoClose: 3000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true\n          }); // setTimeout(() => {Router.push('/')},3000);  \n\n          this.closeModal();\n          this.resetForm();\n        });\n      } else {\n        toast.error('Fillup the form', {\n          position: \"bottom-left\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true\n        });\n      }\n    });\n  }\n\n  render() {\n    let {\n      previewImage,\n      previewImageHover\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: `admin-product-modal ${this.props.active}`\n    }, __jsx(\"div\", {\n      className: \"modal-innter-content\"\n    }, __jsx(\"button\", {\n      type: \"button\",\n      className: \"close\",\n      onClick: this.closeModal\n    }, __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, __jsx(\"i\", {\n      className: \"bx bx-x\"\n    }))), __jsx(\"div\", {\n      className: \"modal-body\"\n    }, __jsx(\"h3\", null, \"Add Product\"), __jsx(\"form\", {\n      onSubmit: this.addProduct\n    }, __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"label\", null, \"Upload your Product image here\"), __jsx(\"div\", {\n      className: \"upload-img\"\n    }, __jsx(\"span\", null, __jsx(\"i\", {\n      className: \"bx bxs-image-add\"\n    }), \"Click here or drop files to upload\"), __jsx(\"input\", {\n      type: \"file\",\n      className: \"form-control-file\",\n      name: \"productImage\",\n      accept: \"image/*\",\n      onChange: this.handleChange\n    })), previewImage ? __jsx(\"div\", {\n      className: \"uploaded-img\"\n    }, __jsx(\"img\", {\n      src: previewImage,\n      alt: \"Image\",\n      className: \"img-thumbnail\"\n    })) : null), __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"label\", null, \"Upload your Product hover image here\"), __jsx(\"div\", {\n      className: \"upload-img\"\n    }, __jsx(\"span\", null, __jsx(\"i\", {\n      className: \"bx bxs-image-add\"\n    }), \"Click here or drop files to upload\"), __jsx(\"input\", {\n      type: \"file\",\n      className: \"form-control-file\",\n      name: \"productImageHover\",\n      onChange: this.handleChangeHover\n    })), previewImageHover ? __jsx(\"div\", {\n      className: \"uploaded-img\"\n    }, __jsx(\"img\", {\n      src: previewImageHover,\n      alt: \"Image\",\n      className: \"img-thumbnail\"\n    })) : null), __jsx(\"h4\", {\n      className: \"title\"\n    }, \"Add your Product description and necessary information from here\"), __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"label\", null, \"Name\"), __jsx(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      value: this.state.title,\n      onChange: e => this.setState({\n        title: e.target.value\n      })\n    })), __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"label\", null, \"Description\"), __jsx(\"textarea\", {\n      className: \"form-control\",\n      value: this.state.description,\n      onChange: e => this.setState({\n        description: e.target.value\n      }),\n      rows: \"3\"\n    })), __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"label\", null, \"Price\"), __jsx(\"input\", {\n      type: \"number\",\n      className: \"form-control\",\n      value: this.state.newPrice,\n      onChange: e => this.setState({\n        newPrice: e.target.value\n      })\n    })), __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"label\", null, \"Offer?\"), __jsx(\"select\", {\n      className: \"form-control\",\n      onChange: e => this.setState({\n        offer: e.target.value\n      })\n    }, __jsx(\"option\", {\n      value: \"true\"\n    }, \"Yes\"), __jsx(\"option\", {\n      value: \"false\"\n    }, \"No\"))), __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"label\", null, \"Old Price\"), __jsx(\"input\", {\n      type: \"number\",\n      className: \"form-control\",\n      value: this.state.oldPrice,\n      onChange: e => this.setState({\n        oldPrice: e.target.value\n      })\n    })), __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"label\", null, \"New Product?\"), __jsx(\"select\", {\n      className: \"form-control\",\n      onChange: e => this.setState({\n        newProduct: e.target.value\n      })\n    }, __jsx(\"option\", {\n      value: \"true\"\n    }, \"Yes\"), __jsx(\"option\", {\n      value: \"false\"\n    }, \"No\"))), __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"label\", null, \"On Sale?\"), __jsx(\"select\", {\n      className: \"form-control\",\n      onChange: e => this.setState({\n        onSale: e.target.value\n      })\n    }, __jsx(\"option\", {\n      value: \"true\"\n    }, \"Yes\"), __jsx(\"option\", {\n      value: \"false\"\n    }, \"No\"))), __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"label\", null, \"Discount?\"), __jsx(\"select\", {\n      className: \"form-control\",\n      onChange: e => this.setState({\n        discount: e.target.value\n      })\n    }, __jsx(\"option\", {\n      value: \"true\"\n    }, \"Yes\"), __jsx(\"option\", {\n      value: \"false\"\n    }, \"No\"))), __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"label\", null, \"Discount In Percent (1 or 10 ...)\"), __jsx(\"input\", {\n      type: \"number\",\n      className: \"form-control\",\n      value: this.state.discountOff,\n      onChange: e => this.setState({\n        discountOff: e.target.value\n      })\n    })), __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"label\", null, \"Product Type\"), __jsx(\"select\", {\n      className: \"form-control\",\n      onChange: e => this.setState({\n        type: e.target.value\n      })\n    }, __jsx(\"option\", {\n      value: \"T-Shirt\"\n    }, \"T-Shirt\"), __jsx(\"option\", {\n      value: \"Bags\"\n    }, \"Bags\"), __jsx(\"option\", {\n      value: \"Shoes\"\n    }, \"Shoes\"), __jsx(\"option\", {\n      value: \"Women Clothes\"\n    }, \"Women Clothes\"), __jsx(\"option\", {\n      value: \"medical\"\n    }, \"Medical Equipment\"), __jsx(\"option\", {\n      value: \"grocery\"\n    }, \"Grocery\"), __jsx(\"option\", {\n      value: \"electronics\"\n    }, \"Electronics\"), __jsx(\"option\", {\n      value: \"furniture\"\n    }, \"Furniture\"), __jsx(\"option\", {\n      value: \"jewelry\"\n    }, \"Jewelry\"))), __jsx(\"div\", {\n      className: \"modal-btn\"\n    }, __jsx(\"div\", {\n      className: \"btn optional-btn float-left\",\n      onClick: this.closeModal\n    }, \"Cancel\"), __jsx(\"button\", {\n      className: \"btn default-btn float-right\"\n    }, \"Create Product\")))))));\n  }\n\n}\n\nexport default AddProductModal;","map":null,"metadata":{},"sourceType":"module"}